from typing import Any

import neon as ne
import dense as neon_dense
import warp as wp


class Grid(ne.Grid):
    def __init__(self, name, backend, dim: ne.Index):
        ne.Grid.__init__(self, name=name, dim=dim, backend=backend)

    def new_field(self, dtype, name):
        return neon_dense.Field(name=name, grid=self, layout_dim=self.dim, dtype=dtype)

    def new_container(self, name, op, parameter_list) -> ne.Container:
        c: ne.Container = ne.Container(name=name, grid=self, function=op, parameter_list=parameter_list)
        return c

    def get_span(self, device_id: int):
        span = neon_dense.Span()
        index = ne.Index()
        index.set(0, 0, 0)
        span.set(dim=self.dim,
                 origin=index,
                 device_idx=device_id)
        return neon_dense.Span


from typing import Union


@wp.struct
class myTest:
    a: int


@wp.struct
class test_partition_int:
    a: int
    memory: wp.array(dtype=int)
    dim: ne.Index
    backVal: int
    origin: ne.Index

def getVal(s:test_partition_int, idx: ne.Index):
    return s.memory[idx.x + idx.y * self.dim.x + idx.z * self.dim.x * self.dim.y]

def getNgh(s:test_partition_int, idx: ne.Index):
    return s.memory[idx.x + idx.y * self.dim.x + idx.z * self.dim.x * self.dim.y]


@wp.func
def stream(idx: ne.Index, fin: test_partition_int):
    pass


@wp.func
def lbmIteration(idx: ne.Index, fin: test_partition_int, fout: test_partition_int):
    registerPop = stream(fin)
    collide(registerPop)
    localStore(idx, fout)

# Generated By "Neon"
@wp.kernel
def run(foo, fin: test_partition_int, fout: test_partition_int):
    // / Neon
    ne.Index
    idx = fin.get_idx();
    foo(idx, fin, fout);

wp.launch(run, [lbmIteration, fin, fout])

@wp.struct
class test_partition_float:
    a: float


def getVal(g: test_partition_float):
    pass


@wp.struct
class test_partition_int:
    layout_dim: ne.Index
    default_value: int

    def set(self,
            layout_dim: ne.Index,
            default_value: int):
        self.layout_dim = layout_dim
        self.default_value = default_value

    def gerTypeName(self):
        return "{dtype_str}"

    def message(self):
        return "Partition_{dtype_str}"

    # @wp.func
    # @classmethod
    # def get_default_value(cls):
    #     return cls.default_value

    # @wp.func
    # def operator_brackets(self, idx: neon_dense.Index):
    #     pitch_z: int = self.layout_dim.x * self.layout_dim.y
    #     pitch_y: int = self.layout_dim.x
    #     return self.memory[idx.x + idx.y * pitch_y + idx.z * pitch_z]

    #
    # def setDefautlValue(self, value: dtype):
    #     self.default_value = value
    #


@wp.func
def get_default_value(it: test_partition_int):
    return it.default_value


@wp.kernel
def my_kernel(span: test_partition_int):
    x, y, z = wp.tid()
    # idx = span.get_idx()
    if x == 0 and y == 0 and z == 0:
        print(get_default_value(span))
    pass


def main():
    dim = ne.Index()
    dim.set(10, 10, 10)
    backend = ne.Backend()
    grid = neon_dense.Grid(name="grid-test", backend=backend, dim=dim)
    fieldA = grid.new_field(dtype=int, name="field-test")

    def myOp(idx: Any, a: Any) -> None:
        a[idx] = 33
        return

    opContainer = grid.new_container(name="container-test", op=myOp, parameter_list=[fieldA])
    print(str(type(fieldA)))

    span = test_partition_int()
    span.set(layout_dim=dim, default_value=99)

    wp.launch(kernel=my_kernel,  # kernel to launch
              dim=1024,  # number of threads
              inputs=[span],  # parameters
              device="cuda:0")
    wp.synchronize()
    pass


if __name__ == '__main__':
    main()
